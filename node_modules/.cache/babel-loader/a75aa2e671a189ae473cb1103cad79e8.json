{"ast":null,"code":"var _jsxFileName = \"/Users/auguste/Documents/Dev/EIP/Github/Documentation/src/views/Blog/TechnicalDocumentation/Deployment.js\";\nimport React from \"react\";\nimport ReactMarkdown from 'react-markdown';\nimport { makeStyles } from \"@material-ui/core/styles\"; // @material-ui/icons\n// core components\n\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport Header from \"components/Header/Header.js\";\nimport HeaderLinks from \"components/Header/HeaderLinks.js\";\nimport styles from \"assets/jss/material-kit-react/views/userDocPage.js\"; // Sections for this page\n\nimport Sidebar from \"components/Sidebar/Technical/Sidebar\";\nvar useStyles = makeStyles(styles);\nvar markdown = 'Le backend de Technoservs est déployé via Github Actions sur un serveur Azure.\\n' + '\\n' + 'Le repository est configuré pour déclencher des tests unitaires après un pull request, une fois les tests validés ' + 'sur la branche principale, une action effectue le transfert des fichiers vers le serveur Azure.\\n' + '\\n' + 'Un outil (incron) exécutant des actions selon des événements du système de fichiers est configuré sur le serveur ' + 'Azure afin de redémarrer automatiquement le serveur (Go) si nécessaire.\\n';\nvar markdown2 = 'Le fichier de configuration du déploiement continue cd.yml se trouve dans le dossier .github/workflows.\\n' + 'Il déploie les fichiers via ssh sur le serveur Azure avec quatre secrets configurés dans Github (host, port, ' + '```' + 'privateKey et username) :\\n' + 'host: ${{ secrets.HOST }}\\t\\t// L’adresse du serveur Azure\\n' + 'username: ${{ secrets.USERNAME }}\\t// le nom de l’utilisateur\\n' + 'key: ${{ secrets.PRIVATEKEY }}\\t\\t// la clé privée\\n' + 'port: ${{ secrets.PORT }}\\t\\t\\t// le port ssh\\n' + '```' + 'Une fois les fichiers transférés sur le serveur, incron vérifie si des fichiers ont été modifié et redémarre le ' + 'serveur Go.\\n' + 'La commande incrontab -e permet de spécifier le dossier à surveiller, le déclencheur et la commande ou le script ' + 'à exécuter:\\n' + '<\\/path/folder> TRIGGER <CMD or /path/script>\\n' + '\\n' + 'Example:\\n' + '/home/technoservs_user/Backend/ IN_MODIFY /home/technoservs_user/startBackend.sh\\n' + '\\n' + 'Voir la documentation pour plus de détails: https://doc.ubuntu-fr.org/incron\\n';\nexport default function Deployment(props) {\n  var classes = useStyles();\n  var rest = Object.assign({}, props);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(Header, Object.assign({\n    color: \"white\",\n    brand: \"TechnoServs\",\n    fixed: true,\n    rightLinks: /*#__PURE__*/React.createElement(HeaderLinks, null),\n    changeColorOnScroll: {\n      height: 200,\n      color: \"white\"\n    }\n  }, rest)), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(GridContainer, null, /*#__PURE__*/React.createElement(GridItem, null, /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"br\", null)), /*#__PURE__*/React.createElement(GridItem, null, /*#__PURE__*/React.createElement(Sidebar, null)), /*#__PURE__*/React.createElement(GridItem, {\n    style: {\n      marginLeft: \"220px\"\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", null, \"Documentation Technique\"), /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"h2\", null), /*#__PURE__*/React.createElement(\"h3\", null, /*#__PURE__*/React.createElement(\"b\", null, \"Backend\")), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://i.imgur.com/IiXw15X.png\",\n    className: classes.imgboth\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://i.imgur.com/Vyx7tlb.png\",\n    className: classes.imgboth\n  })), /*#__PURE__*/React.createElement(ReactMarkdown, {\n    source: markdown\n  }), /*#__PURE__*/React.createElement(ReactMarkdown, {\n    source: markdown2\n  }), /*#__PURE__*/React.createElement(\"div\", null)))));\n}","map":{"version":3,"sources":["/Users/auguste/Documents/Dev/EIP/Github/Documentation/src/views/Blog/TechnicalDocumentation/Deployment.js"],"names":["React","ReactMarkdown","makeStyles","GridContainer","GridItem","Header","HeaderLinks","styles","Sidebar","useStyles","markdown","markdown2","Deployment","props","classes","rest","main","height","color","marginLeft","imgboth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,UAAT,QAA2B,0BAA3B,C,CAEA;AAEA;;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AAEA,OAAOC,MAAP,MAAmB,oDAAnB,C,CAEA;;AAEA,OAAOC,OAAP,MAAoB,sCAApB;AACA,IAAMC,SAAS,GAAGP,UAAU,CAACK,MAAD,CAA5B;AACA,IAAMG,QAAQ,GACV,qFACA,IADA,GAEA,oHAFA,GAGA,mGAHA,GAIA,IAJA,GAKA,mHALA,GAMA,2EAPJ;AASA,IAAMC,SAAS,GACX,8GACA,+GADA,GAEA,KAFA,GAGA,6BAHA,GAIA,8DAJA,GAKA,iEALA,GAMA,sDANA,GAOA,iDAPA,GAQA,KARA,GASA,kHATA,GAUA,eAVA,GAWA,mHAXA,GAYA,eAZA,GAaA,iDAbA,GAcA,IAdA,GAeA,YAfA,GAgBA,oFAhBA,GAiBA,IAjBA,GAkBA,gFAnBJ;AAqBA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACtC,MAAMC,OAAO,GAAGL,SAAS,EAAzB;AADsC,MAE3BM,IAF2B,qBAElBF,KAFkB;AAGtC,sBACI;AAAK,IAAA,SAAS,EAAEC,OAAO,CAACE;AAAxB,kBACI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,OADV;AAEI,IAAA,KAAK,EAAC,aAFV;AAGI,IAAA,KAAK,MAHT;AAII,IAAA,UAAU,eAAE,oBAAC,WAAD,OAJhB;AAKI,IAAA,mBAAmB,EAAE;AACjBC,MAAAA,MAAM,EAAE,GADS;AAEjBC,MAAAA,KAAK,EAAE;AAFU;AALzB,KASQH,IATR,EADJ,eAYI,8CACI,oBAAC,aAAD,qBACI,oBAAC,QAAD,qBACI,+BADJ,eACU,+BADV,eACgB,+BADhB,eACsB,+BADtB,CADJ,eAII,oBAAC,QAAD,qBACI,oBAAC,OAAD,OADJ,CAJJ,eAOI,oBAAC,QAAD;AAAW,IAAA,KAAK,EAAE;AAACI,MAAAA,UAAU,EAAE;AAAb;AAAlB,kBACI,0DADJ,eAEI,+BAFJ,eAGI,+BAHJ,eAII,6CAAI,yCAAJ,CAJJ,eAKI,8CACI;AAAK,IAAA,GAAG,EAAC,iCAAT;AAA2C,IAAA,SAAS,EAAEL,OAAO,CAACM;AAA9D,IADJ,eAEI;AAAK,IAAA,GAAG,EAAC,iCAAT;AAA2C,IAAA,SAAS,EAAEN,OAAO,CAACM;AAA9D,IAFJ,CALJ,eASI,oBAAC,aAAD;AAAe,IAAA,MAAM,EAAEV;AAAvB,IATJ,eAUI,oBAAC,aAAD;AAAe,IAAA,MAAM,EAAEC;AAAvB,IAVJ,eAWI,gCAXJ,CAPJ,CADJ,CAZJ,CADJ;AAuCH","sourcesContent":["import React from \"react\";\nimport ReactMarkdown from 'react-markdown'\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n// @material-ui/icons\n\n// core components\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport Header from \"components/Header/Header.js\";\nimport HeaderLinks from \"components/Header/HeaderLinks.js\";\n\nimport styles from \"assets/jss/material-kit-react/views/userDocPage.js\";\n\n// Sections for this page\n\nimport Sidebar from \"components/Sidebar/Technical/Sidebar\";\nconst useStyles = makeStyles(styles);\nconst markdown =\n    'Le backend de Technoservs est déployé via Github Actions sur un serveur Azure.\\n' +\n    '\\n' +\n    'Le repository est configuré pour déclencher des tests unitaires après un pull request, une fois les tests validés ' +\n    'sur la branche principale, une action effectue le transfert des fichiers vers le serveur Azure.\\n' +\n    '\\n' +\n    'Un outil (incron) exécutant des actions selon des événements du système de fichiers est configuré sur le serveur ' +\n    'Azure afin de redémarrer automatiquement le serveur (Go) si nécessaire.\\n';\n\nconst markdown2 =\n    'Le fichier de configuration du déploiement continue cd.yml se trouve dans le dossier .github/workflows.\\n' +\n    'Il déploie les fichiers via ssh sur le serveur Azure avec quatre secrets configurés dans Github (host, port, ' +\n    '```' +\n    'privateKey et username) :\\n' +\n    'host: ${{ secrets.HOST }}\\t\\t// L’adresse du serveur Azure\\n' +\n    'username: ${{ secrets.USERNAME }}\\t// le nom de l’utilisateur\\n' +\n    'key: ${{ secrets.PRIVATEKEY }}\\t\\t// la clé privée\\n' +\n    'port: ${{ secrets.PORT }}\\t\\t\\t// le port ssh\\n' +\n    '```' +\n    'Une fois les fichiers transférés sur le serveur, incron vérifie si des fichiers ont été modifié et redémarre le ' +\n    'serveur Go.\\n' +\n    'La commande incrontab -e permet de spécifier le dossier à surveiller, le déclencheur et la commande ou le script ' +\n    'à exécuter:\\n' +\n    '<\\/path/folder> TRIGGER <CMD or /path/script>\\n' +\n    '\\n' +\n    'Example:\\n' +\n    '/home/technoservs_user/Backend/ IN_MODIFY /home/technoservs_user/startBackend.sh\\n' +\n    '\\n' +\n    'Voir la documentation pour plus de détails: https://doc.ubuntu-fr.org/incron\\n';\n\nexport default function Deployment(props) {\n    const classes = useStyles();\n    const { ...rest } = props;\n    return (\n        <div className={classes.main}>\n            <Header\n                color=\"white\"\n                brand=\"TechnoServs\"\n                fixed\n                rightLinks={<HeaderLinks />}\n                changeColorOnScroll={{\n                    height: 200,\n                    color: \"white\"\n                }}\n                {...rest}\n            />\n            <div>\n                <GridContainer>\n                    <GridItem>\n                        <br /><br /><br /><br />\n                    </GridItem>\n                    <GridItem>\n                        <Sidebar/>\n                    </GridItem>\n                    <GridItem  style={{marginLeft: \"220px\"}}>\n                        <h1>Documentation Technique</h1>\n                        <br/>\n                        <h2></h2>\n                        <h3><b>Backend</b></h3>\n                        <div>\n                            <img src=\"https://i.imgur.com/IiXw15X.png\" className={classes.imgboth}/>\n                            <img src=\"https://i.imgur.com/Vyx7tlb.png\" className={classes.imgboth}/>\n                        </div>\n                        <ReactMarkdown source={markdown}/>\n                        <ReactMarkdown source={markdown2}/>\n                        <div>\n                        </div>\n                    </GridItem>\n                </GridContainer>\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}